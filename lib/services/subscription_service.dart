import 'package:dio/dio.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:pe_emoease_mobileapp_flutter/services/profile_service.dart';

class SubscriptionService {
  final Dio _dio;

  SubscriptionService._internal(this._dio);

  static Future<SubscriptionService> create() async {
    final dio = Dio(
      BaseOptions(
        baseUrl: 'https://api.emoease.vn/subscription-service',
        connectTimeout: const Duration(seconds: 90),
        receiveTimeout: const Duration(seconds: 90),
        headers: {
          'Content-Type': 'application/json',
        },
      ),
    );
    return SubscriptionService._internal(dio);
  }

  Future<void> _attachAuthHeader() async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('access_token');
    print("üìå Token hi·ªán t·∫°i: $token");
    if (token != null && token.isNotEmpty) {
      _dio.options.headers['Authorization'] = 'Bearer $token';
    } else {
      print('‚ùå Kh√¥ng t√¨m th·∫•y access token ‚Äì user ch∆∞a login?');
    }
  }

  Future<List<dynamic>> getServicePackages() async {
    try {
      await _attachAuthHeader();
      print('üëâ G·ªçi API GET /service-packages');
      final response = await _dio.get('/service-packages');

      print('‚úÖ D·ªØ li·ªáu g√≥i d·ªãch v·ª•: ${response.data}');
      return response.data['servicePackages']?['data'] ?? [];
    } catch (e) {
      print('‚ùå L·ªói khi fetch g√≥i d·ªãch v·ª•: $e');
      throw Exception('Kh√¥ng th·ªÉ l·∫•y danh s√°ch g√≥i d·ªãch v·ª•: $e');
    }
  }

  Future<String> createUserSubscription({
    required String patientId,
    required String servicePackageId,
    required String paymentMethodName,
    String? promoCode,
    String? giftId,
  }) async {
    try {
      await _attachAuthHeader();

      final payload = {
        "userSubscription": {
          "patientId": patientId,
          "servicePackageId": servicePackageId,
          "promoCode": null,
          "giftId": null,
          "startDate": DateTime.now().toIso8601String(),
          "paymentMethodName": paymentMethodName,
          if (promoCode != null && promoCode.isNotEmpty) "promoCode": promoCode,
          if (giftId != null && giftId.isNotEmpty) "giftId": giftId,
        }
      };

      print('üëâ G·ª≠i POST /user-subscriptions v·ªõi d·ªØ li·ªáu: $payload');
      final response = await _dio.post('/user-subscriptions', data: payload);
      print('‚úÖ Subscription t·∫°o th√†nh c√¥ng: ${response.data}');
      return response.data['paymentUrl'];
    } catch (e) {
      print('‚ùå L·ªói khi t·∫°o subscription: $e');
      throw Exception('Kh√¥ng th·ªÉ t·∫°o subscription: $e');
    }
  }

}
